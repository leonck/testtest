package com.hubsan.swifts.activitis;import android.app.Activity;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.content.pm.PackageManager;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.view.View;import android.view.WindowManager;import android.widget.Toast;import com.hubsan.swifts.R;import com.hubsan.swifts.SwiftsApplication;import com.hubsansdk.application.HubsanApplication;import com.hubsansdk.drone.HubsanDrone;import com.hubsansdk.utils.LogX;import com.utils.ConstantsPermission;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * */public abstract class BasePermissionActivity extends Activity {    private SwiftsApplication app;    private HubsanDrone drone;    @Override    protected void onCreate(Bundle savedInstanceState) {        hideNavigationBar();        super.onCreate(savedInstanceState);        //保持屏幕常亮        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        onCreateView();        app = (SwiftsApplication) HubsanApplication.getApplication();        this.drone = app.drone;    }    public abstract void onCreateView();    protected boolean isPermissionGranted(String permissionName, int questCode) {        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {            return true;        }        //判断是否需要请求允许权限        int hasPermision = checkSelfPermission(permissionName);        if (hasPermision != PackageManager.PERMISSION_GRANTED) {            requestPermissions(new String[]{permissionName}, questCode);            return false;        }        return true;    }    protected boolean isPermissionsAllGranted(String[] permArray, int questCode) {        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {            return true;        }        //获得批量请求但被禁止的权限列表        List<String> deniedPerms = new ArrayList<String>();        for (int i = 0; permArray != null && i < permArray.length; i++) {            if (PackageManager.PERMISSION_GRANTED != checkSelfPermission(permArray[i])) {                deniedPerms.add(permArray[i]);            }        }        //进行批量请求        int denyPermNum = deniedPerms.size();        if (denyPermNum != 0) {            requestPermissions(deniedPerms.toArray(new String[denyPermNum]), questCode);            return false;        }        return true;    }    @Override    public void onRequestPermissionsResult(int requestCode,                                           String[] permissions, int[] grantResults) {        if (grantResults.length == 0) {            return;        }        switch (requestCode) {            case ConstantsPermission.QUEST_CODE_LOCTION:                if (grantResults[0] != PackageManager.PERMISSION_GRANTED) {                    popAlterDialog("位置", "位置信息权限被禁止，将导致定位失败。。是否开启该权限？(步骤：应用信息->权限->'勾选'位置)");                } else {                    showShortMsg("用户已经授予位置权限");                }                break;            case ConstantsPermission.QUEST_CODE_CAMERA:                if (grantResults[0] != PackageManager.PERMISSION_GRANTED) {                    popAlterDialog("相机", "摄像头使用权限被禁止，手电筒无法正常使用。是否开启该权限？(步骤：应用信息->权限->'勾选'相机)");                } else {                    showShortMsg("恭喜，用户已经授予相机权限");                }                break;            case ConstantsPermission.QUEST_CODE_SEND_SMS:                if (grantResults[0] != PackageManager.PERMISSION_GRANTED) {                    popAlterDialog("短信", "发送短信权限被禁止，无法使用反馈/建议功能。是否开启该权限？(步骤：应用信息->权限->'勾选'短信)");                } else {                    showShortMsg("恭喜，用户已经授予短信权限");                }                break;            case ConstantsPermission.QUEST_CODE_ALL:                doPermissionAll(ConstantsPermission.permArray, grantResults);                break;            case ConstantsPermission.QUEST_CODE_CALL_PHONE:                if (grantResults[0] != PackageManager.PERMISSION_GRANTED) {                    popAlterDialog("拨打电话", "拨打电话权限被禁止，无法使用拨打电话功能。是否开启该权限？(步骤：应用信息->权限->'勾选'电话)");                } else {                    showShortMsg("恭喜，用户已经授予所有权限");                }                break;            default:                super.onRequestPermissionsResult(requestCode, permissions,                        grantResults);                break;        }    }    private void doPermissionAll(String[] permissions, int[] grantResults) {        int grantedPermNum = 0;        int totalPermissons = permissions.length;        int totalResults = grantResults.length;        if (totalPermissons == 0 || totalResults == 0) {            return;        }        Map<String, Integer> permResults = new HashMap<String, Integer>();        //初始化Map容器，用于判断哪些权限被授予        for (String perm : ConstantsPermission.permArray) {            permResults.put(perm, PackageManager.PERMISSION_DENIED);        }        //根据授权的数目和请求授权的数目是否相等来判断是否全部授予权限        for (int i = 0; i < totalResults; i++) {            permResults.put(permissions[i], grantResults[i]);            if (permResults.get(permissions[i]) == PackageManager.PERMISSION_GRANTED) {                grantedPermNum++;            }            LogX.e("权限：" + permissions[i] + "-->" + grantResults[i]);        }        if (grantedPermNum == totalPermissons) {            //用于授予全部权限        } else {            showShortMsg("批量申请权限失败，将会影响正常使用！");        }    }    private void showShortMsg(String msg) {        Toast.makeText(this, msg, Toast.LENGTH_SHORT).show();    }    private void popAlterDialog(final String msgFlg, String msgInfo) {        new AlertDialog.Builder(BasePermissionActivity.this)                .setTitle(app.getResources().getString(R.string.hubsan_user_permission_location_notify))                .setMessage(msgInfo)                .setNegativeButton(app.getResources().getString(R.string.cancel), new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        dialog.dismiss();                    }                })                .setPositiveButton(app.getResources().getString(R.string.settings), new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        //前往应用详情界面                        try {                            Uri packUri = Uri.parse("package:" + getPackageName());                            Intent intent = new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS, packUri);                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                            BasePermissionActivity.this.startActivity(intent);                        } catch (Exception e) {                            showShortMsg(app.getResources().getString(R.string.hubsan_user_permission_location_skip_failed));                        }                        dialog.dismiss();                    }                }).create().show();    }    public void hideNavigationBar() {        int uiFlags = View.SYSTEM_UI_FLAG_LAYOUT_STABLE                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar                | View.SYSTEM_UI_FLAG_FULLSCREEN; // hide status bar        if (android.os.Build.VERSION.SDK_INT >= 19) {            uiFlags |= 0x00001000;    //SYSTEM_UI_FLAG_IMMERSIVE_STICKY: hide navigation bars - compatibility: building API level is lower thatn 19, use magic number directly for higher API target level        } else {            uiFlags |= View.SYSTEM_UI_FLAG_LOW_PROFILE;        }        getWindow().getDecorView().setSystemUiVisibility(uiFlags);    }}