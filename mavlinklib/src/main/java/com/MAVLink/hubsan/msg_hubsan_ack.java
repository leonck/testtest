/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE HUBSAN_ACK PACKING
package com.MAVLink.hubsan;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
* hubsan ack.
*/
public class msg_hubsan_ack extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_HUBSAN_ACK = 52;
    public static final int MAVLINK_MSG_LENGTH = 7;
    private static final long serialVersionUID = MAVLINK_MSG_ID_HUBSAN_ACK;


      
    /**
    * System ID
    */
    public short target_system;
      
    /**
    * Component ID
    */
    public short target_component;
      
    /**
    * ID of message in payload
    */
    public short ack_msgid;
      
    /**
    * Parameter 1, as defined by MAV_CMD/MAV_RESULT enum.
    */
    public short param1;
      
    /**
    * Parameter 2, as defined by MAV_CMD/MAV_RESULT enum.
    */
    public short param2;
      
    /**
    * Parameter 3, as defined by MAV_CMD/MAV_RESULT enum.
    */
    public short param3;
      
    /**
    * Parameter 4, as defined by MAV_CMD/MAV_RESULT enum.
    */
    public short param4;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket();
        packet.len = MAVLINK_MSG_LENGTH;
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_HUBSAN_ACK;
              
        packet.payload.putUnsignedByte(target_system);
              
        packet.payload.putUnsignedByte(target_component);
              
        packet.payload.putUnsignedByte(ack_msgid);
              
        packet.payload.putUnsignedByte(param1);
              
        packet.payload.putUnsignedByte(param2);
              
        packet.payload.putUnsignedByte(param3);
              
        packet.payload.putUnsignedByte(param4);
        
        return packet;
    }

    /**
    * Decode a hubsan_ack message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.target_system = payload.getUnsignedByte();
              
        this.target_component = payload.getUnsignedByte();
              
        this.ack_msgid = payload.getUnsignedByte();
              
        this.param1 = payload.getUnsignedByte();
              
        this.param2 = payload.getUnsignedByte();
              
        this.param3 = payload.getUnsignedByte();
              
        this.param4 = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_hubsan_ack(){
        msgid = MAVLINK_MSG_ID_HUBSAN_ACK;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_hubsan_ack(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_HUBSAN_ACK;
        unpack(mavLinkPacket.payload);        
    }

                  
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_HUBSAN_ACK -"+" target_system:"+target_system+" target_component:"+target_component+" msgid:"+msgid+" param1:"+param1+" param2:"+param2+" param3:"+param3+" param4:"+param4+"";
    }
}
        